// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogSetAuthority extends EthereumEvent {
  get params(): LogSetAuthority__Params {
    return new LogSetAuthority__Params(this);
  }
}

export class LogSetAuthority__Params {
  _event: LogSetAuthority;

  constructor(event: LogSetAuthority) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class LogSetOwner extends EthereumEvent {
  get params(): LogSetOwner__Params {
    return new LogSetOwner__Params(this);
  }
}

export class LogSetOwner__Params {
  _event: LogSetOwner;

  constructor(event: LogSetOwner) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetAddition extends EthereumEvent {
  get params(): AssetAddition__Params {
    return new AssetAddition__Params(this);
  }
}

export class AssetAddition__Params {
  _event: AssetAddition;

  constructor(event: AssetAddition) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AssetRemoval extends EthereumEvent {
  get params(): AssetRemoval__Params {
    return new AssetRemoval__Params(this);
  }
}

export class AssetRemoval__Params {
  _event: AssetRemoval;

  constructor(event: AssetRemoval) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MelonAccounting__performCalculationsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    map.set("value5", EthereumValue.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class MelonAccounting__atLastAllocationResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    map.set("value2", EthereumValue.fromUnsignedBigInt(this.value2));
    map.set("value3", EthereumValue.fromUnsignedBigInt(this.value3));
    map.set("value4", EthereumValue.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class MelonAccounting__routesResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: Address;
  value7: Address;
  value8: Address;
  value9: Address;
  value10: Address;
  value11: Address;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: Address,
    value7: Address,
    value8: Address,
    value9: Address,
    value10: Address,
    value11: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromAddress(this.value1));
    map.set("value2", EthereumValue.fromAddress(this.value2));
    map.set("value3", EthereumValue.fromAddress(this.value3));
    map.set("value4", EthereumValue.fromAddress(this.value4));
    map.set("value5", EthereumValue.fromAddress(this.value5));
    map.set("value6", EthereumValue.fromAddress(this.value6));
    map.set("value7", EthereumValue.fromAddress(this.value7));
    map.set("value8", EthereumValue.fromAddress(this.value8));
    map.set("value9", EthereumValue.fromAddress(this.value9));
    map.set("value10", EthereumValue.fromAddress(this.value10));
    map.set("value11", EthereumValue.fromAddress(this.value11));
    return map;
  }
}

export class MelonAccounting__getFundHoldingsResult {
  value0: Array<BigInt>;
  value1: Array<Address>;

  constructor(value0: Array<BigInt>, value1: Array<Address>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigIntArray(this.value0));
    map.set("value1", EthereumValue.fromAddressArray(this.value1));
    return map;
  }
}

export class MelonAccounting extends SmartContract {
  static bind(address: Address): MelonAccounting {
    return new MelonAccounting("MelonAccounting", address);
  }

  DENOMINATION_ASSET(): Address {
    let result = super.call("DENOMINATION_ASSET", []);
    return result[0].toAddress();
  }

  calcNav(gav: BigInt, unclaimedFeesInDenominationAsset: BigInt): BigInt {
    let result = super.call("calcNav", [
      EthereumValue.fromUnsignedBigInt(gav),
      EthereumValue.fromUnsignedBigInt(unclaimedFeesInDenominationAsset)
    ]);
    return result[0].toBigInt();
  }

  isInAssetList(param0: Address): boolean {
    let result = super.call("isInAssetList", [
      EthereumValue.fromAddress(param0)
    ]);
    return result[0].toBoolean();
  }

  initialized(): boolean {
    let result = super.call("initialized", []);
    return result[0].toBoolean();
  }

  priceSource(): Address {
    let result = super.call("priceSource", []);
    return result[0].toAddress();
  }

  hub(): Address {
    let result = super.call("hub", []);
    return result[0].toAddress();
  }

  SHARES_DECIMALS(): BigInt {
    let result = super.call("SHARES_DECIMALS", []);
    return result[0].toBigInt();
  }

  DENOMINATION_ASSET_DECIMALS(): BigInt {
    let result = super.call("DENOMINATION_ASSET_DECIMALS", []);
    return result[0].toBigInt();
  }

  version(): Address {
    let result = super.call("version", []);
    return result[0].toAddress();
  }

  calcGav(): BigInt {
    let result = super.call("calcGav", []);
    return result[0].toBigInt();
  }

  calcGavPerShareNetManagementFee(): BigInt {
    let result = super.call("calcGavPerShareNetManagementFee", []);
    return result[0].toBigInt();
  }

  DEFAULT_SHARE_PRICE(): BigInt {
    let result = super.call("DEFAULT_SHARE_PRICE", []);
    return result[0].toBigInt();
  }

  calcAssetGAV(_queryAsset: Address): BigInt {
    let result = super.call("calcAssetGAV", [
      EthereumValue.fromAddress(_queryAsset)
    ]);
    return result[0].toBigInt();
  }

  registry(): Address {
    let result = super.call("registry", []);
    return result[0].toAddress();
  }

  getShareCostInAsset(_numShares: BigInt, _altAsset: Address): BigInt {
    let result = super.call("getShareCostInAsset", [
      EthereumValue.fromUnsignedBigInt(_numShares),
      EthereumValue.fromAddress(_altAsset)
    ]);
    return result[0].toBigInt();
  }

  mlnToken(): Address {
    let result = super.call("mlnToken", []);
    return result[0].toAddress();
  }

  owner(): Address {
    let result = super.call("owner", []);
    return result[0].toAddress();
  }

  calcSharePrice(): BigInt {
    let result = super.call("calcSharePrice", []);
    return result[0].toBigInt();
  }

  performCalculations(): MelonAccounting__performCalculationsResult {
    let result = super.call("performCalculations", []);
    return new MelonAccounting__performCalculationsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  atLastAllocation(): MelonAccounting__atLastAllocationResult {
    let result = super.call("atLastAllocation", []);
    return new MelonAccounting__atLastAllocationResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  routes(): MelonAccounting__routesResult {
    let result = super.call("routes", []);
    return new MelonAccounting__routesResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toAddress(),
      result[7].toAddress(),
      result[8].toAddress(),
      result[9].toAddress(),
      result[10].toAddress(),
      result[11].toAddress()
    );
  }

  NATIVE_ASSET(): Address {
    let result = super.call("NATIVE_ASSET", []);
    return result[0].toAddress();
  }

  authority(): Address {
    let result = super.call("authority", []);
    return result[0].toAddress();
  }

  engine(): Address {
    let result = super.call("engine", []);
    return result[0].toAddress();
  }

  assetHoldings(_asset: Address): BigInt {
    let result = super.call("assetHoldings", [
      EthereumValue.fromAddress(_asset)
    ]);
    return result[0].toBigInt();
  }

  ownedAssets(param0: BigInt): Address {
    let result = super.call("ownedAssets", [
      EthereumValue.fromUnsignedBigInt(param0)
    ]);
    return result[0].toAddress();
  }

  valuePerShare(totalValue: BigInt, numShares: BigInt): BigInt {
    let result = super.call("valuePerShare", [
      EthereumValue.fromUnsignedBigInt(totalValue),
      EthereumValue.fromUnsignedBigInt(numShares)
    ]);
    return result[0].toBigInt();
  }

  getFundHoldings(): MelonAccounting__getFundHoldingsResult {
    let result = super.call("getFundHoldings", []);
    return new MelonAccounting__getFundHoldingsResult(
      result[0].toBigIntArray(),
      result[1].toAddressArray()
    );
  }

  MAX_OWNED_ASSETS(): BigInt {
    let result = super.call("MAX_OWNED_ASSETS", []);
    return result[0].toBigInt();
  }

  getOwnedAssetsLength(): BigInt {
    let result = super.call("getOwnedAssetsLength", []);
    return result[0].toBigInt();
  }
}

export class AddAssetToOwnedAssetsCall extends EthereumCall {
  get inputs(): AddAssetToOwnedAssetsCall__Inputs {
    return new AddAssetToOwnedAssetsCall__Inputs(this);
  }

  get outputs(): AddAssetToOwnedAssetsCall__Outputs {
    return new AddAssetToOwnedAssetsCall__Outputs(this);
  }
}

export class AddAssetToOwnedAssetsCall__Inputs {
  _call: AddAssetToOwnedAssetsCall;

  constructor(call: AddAssetToOwnedAssetsCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAssetToOwnedAssetsCall__Outputs {
  _call: AddAssetToOwnedAssetsCall;

  constructor(call: AddAssetToOwnedAssetsCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends EthereumCall {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get owner_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class TriggerRewardAllFeesCall extends EthereumCall {
  get inputs(): TriggerRewardAllFeesCall__Inputs {
    return new TriggerRewardAllFeesCall__Inputs(this);
  }

  get outputs(): TriggerRewardAllFeesCall__Outputs {
    return new TriggerRewardAllFeesCall__Outputs(this);
  }
}

export class TriggerRewardAllFeesCall__Inputs {
  _call: TriggerRewardAllFeesCall;

  constructor(call: TriggerRewardAllFeesCall) {
    this._call = call;
  }
}

export class TriggerRewardAllFeesCall__Outputs {
  _call: TriggerRewardAllFeesCall;

  constructor(call: TriggerRewardAllFeesCall) {
    this._call = call;
  }
}

export class CalcGavCall extends EthereumCall {
  get inputs(): CalcGavCall__Inputs {
    return new CalcGavCall__Inputs(this);
  }

  get outputs(): CalcGavCall__Outputs {
    return new CalcGavCall__Outputs(this);
  }
}

export class CalcGavCall__Inputs {
  _call: CalcGavCall;

  constructor(call: CalcGavCall) {
    this._call = call;
  }
}

export class CalcGavCall__Outputs {
  _call: CalcGavCall;

  constructor(call: CalcGavCall) {
    this._call = call;
  }

  get gav(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CalcGavPerShareNetManagementFeeCall extends EthereumCall {
  get inputs(): CalcGavPerShareNetManagementFeeCall__Inputs {
    return new CalcGavPerShareNetManagementFeeCall__Inputs(this);
  }

  get outputs(): CalcGavPerShareNetManagementFeeCall__Outputs {
    return new CalcGavPerShareNetManagementFeeCall__Outputs(this);
  }
}

export class CalcGavPerShareNetManagementFeeCall__Inputs {
  _call: CalcGavPerShareNetManagementFeeCall;

  constructor(call: CalcGavPerShareNetManagementFeeCall) {
    this._call = call;
  }
}

export class CalcGavPerShareNetManagementFeeCall__Outputs {
  _call: CalcGavPerShareNetManagementFeeCall;

  constructor(call: CalcGavPerShareNetManagementFeeCall) {
    this._call = call;
  }

  get gavPerShareNetManagementFee(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CalcAssetGAVCall extends EthereumCall {
  get inputs(): CalcAssetGAVCall__Inputs {
    return new CalcAssetGAVCall__Inputs(this);
  }

  get outputs(): CalcAssetGAVCall__Outputs {
    return new CalcAssetGAVCall__Outputs(this);
  }
}

export class CalcAssetGAVCall__Inputs {
  _call: CalcAssetGAVCall;

  constructor(call: CalcAssetGAVCall) {
    this._call = call;
  }

  get _queryAsset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CalcAssetGAVCall__Outputs {
  _call: CalcAssetGAVCall;

  constructor(call: CalcAssetGAVCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateOwnedAssetsCall extends EthereumCall {
  get inputs(): UpdateOwnedAssetsCall__Inputs {
    return new UpdateOwnedAssetsCall__Inputs(this);
  }

  get outputs(): UpdateOwnedAssetsCall__Outputs {
    return new UpdateOwnedAssetsCall__Outputs(this);
  }
}

export class UpdateOwnedAssetsCall__Inputs {
  _call: UpdateOwnedAssetsCall;

  constructor(call: UpdateOwnedAssetsCall) {
    this._call = call;
  }
}

export class UpdateOwnedAssetsCall__Outputs {
  _call: UpdateOwnedAssetsCall;

  constructor(call: UpdateOwnedAssetsCall) {
    this._call = call;
  }
}

export class SetAuthorityCall extends EthereumCall {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get authority_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class InitializeCall extends EthereumCall {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _spokes(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class GetShareCostInAssetCall extends EthereumCall {
  get inputs(): GetShareCostInAssetCall__Inputs {
    return new GetShareCostInAssetCall__Inputs(this);
  }

  get outputs(): GetShareCostInAssetCall__Outputs {
    return new GetShareCostInAssetCall__Outputs(this);
  }
}

export class GetShareCostInAssetCall__Inputs {
  _call: GetShareCostInAssetCall;

  constructor(call: GetShareCostInAssetCall) {
    this._call = call;
  }

  get _numShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _altAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GetShareCostInAssetCall__Outputs {
  _call: GetShareCostInAssetCall;

  constructor(call: GetShareCostInAssetCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CalcSharePriceCall extends EthereumCall {
  get inputs(): CalcSharePriceCall__Inputs {
    return new CalcSharePriceCall__Inputs(this);
  }

  get outputs(): CalcSharePriceCall__Outputs {
    return new CalcSharePriceCall__Outputs(this);
  }
}

export class CalcSharePriceCall__Inputs {
  _call: CalcSharePriceCall;

  constructor(call: CalcSharePriceCall) {
    this._call = call;
  }
}

export class CalcSharePriceCall__Outputs {
  _call: CalcSharePriceCall;

  constructor(call: CalcSharePriceCall) {
    this._call = call;
  }

  get sharePrice(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PerformCalculationsCall extends EthereumCall {
  get inputs(): PerformCalculationsCall__Inputs {
    return new PerformCalculationsCall__Inputs(this);
  }

  get outputs(): PerformCalculationsCall__Outputs {
    return new PerformCalculationsCall__Outputs(this);
  }
}

export class PerformCalculationsCall__Inputs {
  _call: PerformCalculationsCall;

  constructor(call: PerformCalculationsCall) {
    this._call = call;
  }
}

export class PerformCalculationsCall__Outputs {
  _call: PerformCalculationsCall;

  constructor(call: PerformCalculationsCall) {
    this._call = call;
  }

  get gav(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get feesInDenominationAsset(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get feesInShares(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get nav(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get sharePrice(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }

  get gavPerShareNetManagementFee(): BigInt {
    return this._call.outputValues[5].value.toBigInt();
  }
}

export class AssetHoldingsCall extends EthereumCall {
  get inputs(): AssetHoldingsCall__Inputs {
    return new AssetHoldingsCall__Inputs(this);
  }

  get outputs(): AssetHoldingsCall__Outputs {
    return new AssetHoldingsCall__Outputs(this);
  }
}

export class AssetHoldingsCall__Inputs {
  _call: AssetHoldingsCall;

  constructor(call: AssetHoldingsCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AssetHoldingsCall__Outputs {
  _call: AssetHoldingsCall;

  constructor(call: AssetHoldingsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetFundHoldingsCall extends EthereumCall {
  get inputs(): GetFundHoldingsCall__Inputs {
    return new GetFundHoldingsCall__Inputs(this);
  }

  get outputs(): GetFundHoldingsCall__Outputs {
    return new GetFundHoldingsCall__Outputs(this);
  }
}

export class GetFundHoldingsCall__Inputs {
  _call: GetFundHoldingsCall;

  constructor(call: GetFundHoldingsCall) {
    this._call = call;
  }
}

export class GetFundHoldingsCall__Outputs {
  _call: GetFundHoldingsCall;

  constructor(call: GetFundHoldingsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }

  get value1(): Array<Address> {
    return this._call.outputValues[1].value.toAddressArray();
  }
}

export class RemoveFromOwnedAssetsCall extends EthereumCall {
  get inputs(): RemoveFromOwnedAssetsCall__Inputs {
    return new RemoveFromOwnedAssetsCall__Inputs(this);
  }

  get outputs(): RemoveFromOwnedAssetsCall__Outputs {
    return new RemoveFromOwnedAssetsCall__Outputs(this);
  }
}

export class RemoveFromOwnedAssetsCall__Inputs {
  _call: RemoveFromOwnedAssetsCall;

  constructor(call: RemoveFromOwnedAssetsCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveFromOwnedAssetsCall__Outputs {
  _call: RemoveFromOwnedAssetsCall;

  constructor(call: RemoveFromOwnedAssetsCall) {
    this._call = call;
  }
}

export class ConstructorCall extends EthereumCall {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hub(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _denominationAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _nativeAsset(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _defaultAssets(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
